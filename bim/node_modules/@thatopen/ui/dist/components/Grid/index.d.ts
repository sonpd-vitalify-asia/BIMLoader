import { LitElement } from "lit";
import { GridLayoutComponents, GridLayoutsDefinition, UpdateGridLayoutElements } from "./src";
/**
 * A custom grid component for web applications.
 * @element bim-grid
 */
export declare class Grid<T extends GridLayoutComponents = {}> extends LitElement {
    /**
     * CSS styles for the component.
     */
    static styles: import("lit").CSSResult;
    /**
     * Indicates whether the grid should be displayed in a floating state. When set to true, the grid and its children may have different styling to indicate a floating state, such as being absolutely positioned and having pointer-events set to none. This property is reflected to an attribute, allowing it to be set directly in HTML.
     *
     * @default false
     * @example <bim-grid floating></bim-grid>
     * @example
     * const grid = document.createElement('bim-grid');
     * grid.floating = true;
     * document.body.appendChild(grid);
     */
    floating: boolean;
    /**
     * Represents the layout configuration of the grid. The layout is defined by a string identifier which corresponds to a predefined grid template in the `layouts` object of the Grid component. Setting this property updates the grid's template and triggers a reconfiguration of the grid's containers based on the new layout. If the specified layout is not defined, a warning is logged, and the layout remains unchanged. This property is reflected to an attribute, allowing it to be set directly in HTML. Changing the layout will dispatch a "layoutchange" event, which can be used to react to layout changes.
     *
     * @default undefined
     * @example <bim-grid layout="default"></bim-grid>
     * @example
     * const grid = document.createElement('bim-grid');
     * grid.layout = 'default';
     * document.body.appendChild(grid);
     */
    layout?: string;
    private _layouts;
    /**
     * Represents a collection of predefined grid layouts for the Grid component.
     * Each layout is defined by a unique name, a grid template string, and a map of area names to HTMLElement instances or
     * Statefull/Stateless component definitions.
     * The grid template string defines the structure of the grid, and the area names correspond to the grid-area property of the HTMLElement instances.
     * The HTMLElement instances are used to populate the grid with content.
     * @remarks Once defined, the layout is meant to be immutable.
     */
    set layouts(value: GridLayoutsDefinition<T>);
    get layouts(): GridLayoutsDefinition<T>;
    private getLayoutAreas;
    private _onLayoutChange?;
    protected firstUpdated(): void;
    private _updateFunctions;
    updateComponent?: UpdateGridLayoutElements<T>;
    protected render(): import("lit-html").TemplateResult<1>;
}
export * from "./src";
